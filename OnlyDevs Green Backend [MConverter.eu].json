const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: '*',
    }
});

// Store users: map usernames/userIds to socket ids
const users = new Map();

/**
 * Helper to get socket id by username
 * @param {string} username 
 * @returns {string|null}
 */
function getSocketIdByUsername(username) {
    return users.get(username) || null;
}

io.on('connection', (socket) => {
    console.log('A user connected:', socket.id);

    // Register user with username sent from client
    socket.on('register', (username) => {
        users.set(username, socket.id);
        console.log(`User registered: ${username} with socket ID ${socket.id}`);

        // Broadcast updated user list to all
        io.emit('usersList', Array.from(users.keys()));
    });

    // Handle user disconnecting
    socket.on('disconnect', () => {
        // Remove user from users map
        for (const [username, sid] of users.entries()) {
            if (sid === socket.id) {
                users.delete(username);
                console.log(`User disconnected: ${username}`);

                // Broadcast updated user list to all
                io.emit('usersList', Array.from(users.keys()));
                break;
            }
        }
    });

    // Handle sendMessage event
    // message object expected: { sender, recipient, text, time }
    socket.on('sendMessage', (message) => {
        console.log('sendMessage received:', message);
        if (!message.recipient || !message.text) {
            console.error('Invalid message: missing recipient or text');
            return;
        }
        const recipientSocketId = getSocketIdByUsername(message.recipient);
        if (recipientSocketId) {
            // Send to recipient only
            io.to(recipientSocketId).emit('receiveMessage', message);
            // Optionally also send back to sender to confirm sending
            // socket.emit('receiveMessage', message);
        } else {
            console.warn(`Recipient ${message.recipient} not connected.`);
            // Optionally notify sender that recipient is not connected
            socket.emit('userOffline', message.recipient);
        }
    });
});

// Start server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
});

